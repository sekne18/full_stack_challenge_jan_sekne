{"ast":null,"code":"import _slicedToArray from\"C:/Users/jans/Documents/GitHub/full_stack_challenge_jan_sekne/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{FcSearch}from'react-icons/fc';import ImageCard from'../image/ImageCard';import'./content.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Content(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),images=_useState2[0],setImages=_useState2[1];// Stored images\nvar _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),text=_useState4[0],setText=_useState4[1];// Stored search text\nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),btnPressed=_useState6[0],setBtnPressed=_useState6[1];// stored boolean value to trigger\nuseEffect(function(){/* \r\n      It gets called upon building component. \r\n      Will trigger each time there is a change in \"btnPressed\" variable (dependencies).\r\n      Could also add text to dependencies but we would call server for images on each change in input.\r\n    */setImages([]);// clears array\nfetch(\"/api/\".concat(text)).then(function(res){return res.json();}).then(function(data){return setImages(JSON.parse(data).items);});setBtnPressed(false);},[btnPressed]);return/*#__PURE__*/_jsxs(\"section\",{className:\"main\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Coding Challenge\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"search\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",onChange:function onChange(e){return setText(e.target.value);}}),/*#__PURE__*/_jsx(\"button\",{className:\"searchButton\",type:\"button\",onClick:function onClick(){return setBtnPressed(true);},children:/*#__PURE__*/_jsx(FcSearch,{size:35})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"content-container\",children:/* Checks if there are no images. If its true it renders <p> tag, otherwise <ImageCard/> */images.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"No hits\"}):/* map function goes through each item and allows us to create <ImageCard/> components. Item contains all the information about the selected image */images.map(function(item){return/*#__PURE__*/_jsx(ImageCard,{url:item.media.m,title:item.title,source:item.link},item.media.m);})})]});}export default Content;","map":{"version":3,"names":["React","useEffect","useState","FcSearch","ImageCard","Content","images","setImages","text","setText","btnPressed","setBtnPressed","fetch","then","res","json","data","JSON","parse","items","e","target","value","length","map","item","media","m","title","link"],"sources":["C:/Users/jans/Documents/GitHub/full_stack_challenge_jan_sekne/client/src/components/content/Content.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FcSearch } from 'react-icons/fc';\r\nimport ImageCard from '../image/ImageCard';\r\nimport './content.css';\r\n\r\nfunction Content() {\r\n  const [images, setImages] = useState([]); // Stored images\r\n  const [text, setText] = useState(''); // Stored search text\r\n  const [btnPressed, setBtnPressed] = useState(false); // stored boolean value to trigger\r\n\r\n  useEffect(() => {\r\n    /* \r\n      It gets called upon building component. \r\n      Will trigger each time there is a change in \"btnPressed\" variable (dependencies).\r\n      Could also add text to dependencies but we would call server for images on each change in input.\r\n    */\r\n    setImages([]); // clears array\r\n    fetch(`/api/${text}`)\r\n      .then((res) => res.json())\r\n      .then((data) => setImages(JSON.parse(data).items));\r\n    setBtnPressed(false);\r\n  }, [btnPressed]);\r\n\r\n  return (\r\n    <section className='main'>\r\n      <div className=\"search-container\">\r\n        <p>Coding Challenge</p>\r\n        <div className='search'>\r\n          <input type=\"text\" onChange={(e) => setText(e.target.value)}/>\r\n          <button className='searchButton' type='button' onClick={() => setBtnPressed(true)}><FcSearch size={35}/></button>\r\n        </div>\r\n      </div>\r\n      <div className='content-container'>\r\n      { \r\n      /* Checks if there are no images. If its true it renders <p> tag, otherwise <ImageCard/> */\r\n      images.length === 0 ? <p>No hits</p> :\r\n\r\n      /* map function goes through each item and allows us to create <ImageCard/> components. Item contains all the information about the selected image */\r\n      images.map((item) => (\r\n        <ImageCard key={item.media.m} url={item.media.m} title={item.title} source={item.link}/>\r\n      ))\r\n      }\r\n      </div>\r\n    </section>\r\n    \r\n  )\r\n}\r\n\r\nexport default Content"],"mappings":"0JAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,QAAQ,KAAQ,gBAAgB,CACzC,MAAOC,UAAS,KAAM,oBAAoB,CAC1C,MAAO,eAAe,CAAC,wFAEvB,QAASC,QAAO,EAAG,CACjB,cAA4BH,QAAQ,CAAC,EAAE,CAAC,wCAAjCI,MAAM,eAAEC,SAAS,eAAkB;AAC1C,eAAwBL,QAAQ,CAAC,EAAE,CAAC,yCAA7BM,IAAI,eAAEC,OAAO,eAAkB;AACtC,eAAoCP,QAAQ,CAAC,KAAK,CAAC,yCAA5CQ,UAAU,eAAEC,aAAa,eAAqB;AAErDV,SAAS,CAAC,UAAM,CACd;AACJ;AACA;AACA;AACA,MACIM,SAAS,CAAC,EAAE,CAAC,CAAE;AACfK,KAAK,gBAASJ,IAAI,EAAG,CAClBK,IAAI,CAAC,SAACC,GAAG,QAAKA,IAAG,CAACC,IAAI,EAAE,GAAC,CACzBF,IAAI,CAAC,SAACG,IAAI,QAAKT,UAAS,CAACU,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,CAACG,KAAK,CAAC,GAAC,CACpDR,aAAa,CAAC,KAAK,CAAC,CACtB,CAAC,CAAE,CAACD,UAAU,CAAC,CAAC,CAEhB,mBACE,iBAAS,SAAS,CAAC,MAAM,wBACvB,aAAK,SAAS,CAAC,kBAAkB,wBAC/B,uCAAuB,cACvB,aAAK,SAAS,CAAC,QAAQ,wBACrB,cAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,kBAACU,CAAC,QAAKX,QAAO,CAACW,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,EAAC,EAAE,cAC9D,eAAQ,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAE,yBAAMX,cAAa,CAAC,IAAI,CAAC,EAAC,uBAAC,KAAC,QAAQ,EAAC,IAAI,CAAE,EAAG,EAAE,EAAS,GAC7G,GACF,cACN,YAAK,SAAS,CAAC,mBAAmB,UAElC,2FACAL,MAAM,CAACiB,MAAM,GAAK,CAAC,cAAG,8BAAc,CAEpC,qJACAjB,MAAM,CAACkB,GAAG,CAAC,SAACC,IAAI,qBACd,KAAC,SAAS,EAAoB,GAAG,CAAEA,IAAI,CAACC,KAAK,CAACC,CAAE,CAAC,KAAK,CAAEF,IAAI,CAACG,KAAM,CAAC,MAAM,CAAEH,IAAI,CAACI,IAAK,EAAtEJ,IAAI,CAACC,KAAK,CAACC,CAAC,CAA4D,EACzF,CAAC,EAEI,GACE,CAGd,CAEA,cAAetB,QAAO"},"metadata":{},"sourceType":"module"}